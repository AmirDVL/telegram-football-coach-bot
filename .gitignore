# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# üîí SECURITY: Environment and Configuration Files
.env
.env.local
.env.production
.env.staging
*.env

# üîí SECURITY: Bot Configuration Files (containing sensitive data)
config.json
bot_config.json
admin_config.json

# üîí SECURITY: Data Files (user data and payment info)
user_data.json
payments.json
admin_data.json
statistics.json
questionnaire_data.json

# üîí SECURITY: Log Files
*.log
logs/
bot.log
error.log
debug.log

# üîí SECURITY: Database Files
*.db
*.sqlite
*.sqlite3
database.db
bot.db

# üîí SECURITY: SSL Certificates and Keys
*.pem
*.key
*.crt
*.csr
*.p12
ssl/
certs/

# üîí SECURITY: Bot Token and API Keys (extra security)
*token*
*api_key*
*secret*
*password*

# üîí SECURITY: Backup Files
*.bak
*.backup
backup/
backups/
*.sql.gz
*.tar.gz

# üìö DOCUMENTATION: Exclude documentation files (not needed on server)
*.md
README*
CHANGELOG*
LICENSE*
CONTRIBUTING*

# üñ•Ô∏è PLATFORM-SPECIFIC: Windows scripts and files
*.bat
*.cmd
*.ps1
run_windows.py
setup_windows.py
install_windows.*

# üñ•Ô∏è PLATFORM-SPECIFIC: Development and testing files
test_*.py
*_test.py
tests/
testing/
dev_*.py
development/

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharp
#  project, the following line can be uncommented or a per-project entry added
#  to a separate gitignore file in the root of the project.
#.idea/

# Bot specific files
bot_data.json
logs/
*.db

# üìö INCLUDE: Documentation and Scripts (these should be committed)
# Remove any exclusions for:
# *.md files (documentation)
# *.bat files (Windows scripts)
# *.ps1 files (PowerShell scripts)
# *.sh files (deployment scripts)

# Note: All .md, .bat, .ps1, and .sh files WILL be committed
# This ensures documentation and deployment scripts are available on the server
