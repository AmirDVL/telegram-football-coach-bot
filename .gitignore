# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# üîí SECURITY: Environment and Configuration Files
.env
.env.local
.env.production
.env.staging
*.env

# üîí SECURITY: Bot Configuration Files (containing sensitive data)
config.json
bot_config.json
admin_config.json

# üîí SECURITY: Data Files (user data and payment info)
user_data.json
payments.json
admin_data.json
statistics.json
questionnaire_data.json

# üîí SECURITY: Log Files
*.log
logs/
bot.log
error.log
debug.log

# üîí SECURITY: Database Files
*.db
*.sqlite
*.sqlite3
database.db
bot.db

# üìä DATABASE: Temporary database files and setup scripts
add_admin.sql
setup_database.sql
*.sql
!schema.sql
!migrations/*.sql

# üîí SECURITY: SSL Certificates and Keys
*.pem
*.key
*.crt
*.csr
*.p12
ssl/
certs/

# üîí SECURITY: Bot Token and API Keys (extra security)
*token*
*api_key*
*secret*
*password*

# üîí SECURITY: Backup Files
*.bak
*.backup
backup/
backups/
*.sql.gz
*.tar.gz

# üß™ TESTING AND DEVELOPMENT: Test files and temporary scripts
test_*.py
*_test.py
tests/
testing/
dev_*.py
development/
debug_*.py
clear_*.py
fix_*.py
restore_*.py

# ÔøΩÔ∏è TEMPORARY FILES: Cleanup and maintenance scripts
clear_all_data.py
clear_database.py
clear_json_data.py
debug_check.py
fix_quotes.py
restore_admin.py
test_setup.py
test_questionnaire.py
test_bot.py
test_postgresql_compatibility.py

# üìã EXCESSIVE DOCUMENTATION: Keep only essential documentation
ADMIN_COMMAND_SOLUTION.md
ADMIN_SYSTEM_GUIDE.md
COMPLETE_GUIDE.md
DEPLOYMENT_CHECKLIST.md
DEPLOYMENT_REFERENCE.md
GITHUB_SETUP.md
HOSTING_OPTIONS.md
MIGRATION_GUIDE.md
POSTGRESQL_TEST_RESULTS.md
SECURITY_GUIDE.md
test_status_system.md

# üñ•Ô∏è PLATFORM-SPECIFIC: Backup and alternative files
main_backup.py
*_backup.py
*.backup
run.bat
setup.bat

# üöÄ DEPLOYMENT: Temporary deployment and setup scripts
bootstrap.sh
deploy.sh
deploy_production.sh
deploy_shared_host.sh
manage.sh
quick_setup.sh
security_hardening.sh
security_setup.sh
setup_debian.sh
setup_postgres.ps1
startup.sh
update.sh

# üõ†Ô∏è DEVELOPMENT: Configuration and security modules (development only)
security_config.py
security_integration.py
security_monitor.py
secure_database_manager.py

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharp
#  project, the following line can be uncommented or a per-project entry added
#  to a separate gitignore file in the root of the project.
#.idea/

# Bot specific files
bot_data.json
logs/
*.db

# ÔøΩ NOTE: Important files that SHOULD be included:
# - README.md (main documentation)
# - DEPLOYMENT_GUIDE.md (deployment instructions)  
# - requirements.txt (dependencies)
# - main.py (core bot code)
# - All .py modules for bot functionality
# - .env.example (template for environment variables)
